// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sessions.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (user_id, ip) VALUES ($1, $2) RETURNING id
`

type CreateSessionParams struct {
	UserID uuid.UUID `json:"user_id"`
	Ip     string    `json:"ip"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createSession, arg.UserID, arg.Ip)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteAllSessionsForUser = `-- name: DeleteAllSessionsForUser :exec
DELETE FROM sessions WHERE user_id = $1
`

func (q *Queries) DeleteAllSessionsForUser(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteAllSessionsForUser, userID)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const getSession = `-- name: GetSession :one
SELECT id, user_id, ip, created_at, updated_at FROM sessions WHERE id = $1
`

func (q *Queries) GetSession(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Ip,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
